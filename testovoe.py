import requests as r
import json
import datetime as dt
from pprint import pprint

def main():
    """
    Напишите в консоль : q Enter для выхода из режима чтения man к функции main
    Данный запрос содержит в себе такие поля как:
            api_info - статус api для доступа извне
            items - информацию о станциях, на с которых пришла информация о значениях температуры,
            metadata - содержит в себе информацию о
                единицах измерения (reading_unit)
                stations - с информацией о
                    метонахождении станции (location)
                    id самой станции (device_id, id)
    metadata

        •	stations: список станций, с которых собираются данные.
        •	id: уникальный идентификатор станции.
        •	device_id: идентификатор устройства станции.
        •	name: название станции.
        •	location: местоположение станции.
        •	latitude: широта.
        •	longitude: долгота.
        •	reading_type: тип показания (например, “DBT 1M F”).
        •	reading_unit: единица измерения показания (например, “deg C”).

    items

        •	timestamp: временная метка времени, когда были собраны показания.
        •	readings: список показаний температуры для каждой станции.
        •	station_id: идентификатор станции.
        •	value: значение температуры на станции.

    api_info

        •	status: статус API (например, “healthy”).
    """
    print('### Задание 1.a ###')
    print("""
--> SELECT c.carrier_name, COUNT(dz.delivery_zone_id) AS zone_count
-->     FROM carrier c
-->     JOIN delivery_zone dz ON c.carrier_id = dz.carrier_id
-->     GROUP BY c.carrier_name
-->     ORDER BY zone_count DESC
-->     LIMIT 1;
""")
    print('### Конец задания 1.a ###\n')
    print('### Задание 1.b ###')
    print("""
--> Тип атрибута для zone_definition можно определить как TEXT или GEOMETRY 
--> в зависимости от используемой СУБД и требуемой функциональности.
--> Если нужно хранить геометрическую информацию (например, координаты многоугольника зоны доставки),
--> то лучше использовать тип GEOMETRY.
""")
    print('### Конец задания 1.b ###\n')
    print('### Задание 1.c ###')
    print("""
--> Для приведения схемы к третьей нормальной форме необходимо:
-->
-->     1.	Убедиться, что каждое поле зависит только от первичного ключа и не содержит транзитивных зависимостей.
-->     2.	Избавиться от дублирующихся данных и создать отдельные таблицы для сущностей.
-->
-->     •	Создать отдельную таблицу для магазинов (store) с полями store_id и store_name.
-->     •	Создать отдельную таблицу для зон (zone) с полями zone_id, zone_num и zone_definition.
-->     •	Объединить delivery_zone и carrier через таблицу связей, если одна зона может обслуживаться несколькими экспедиторами.
""")
    print('### Конец задания 1.c ###\n')
    print('### Задание 1.d ###')
    print("""
--> CREATE TABLE delivery_zone_carrier (
-->     delivery_zone_id INT,
-->     carrier_id INT,
-->     PRIMARY KEY (delivery_zone_id, carrier_id),
-->     FOREIGN KEY (delivery_zone_id) REFERENCES delivery_zone(delivery_zone_id),
-->     FOREIGN KEY (carrier_id) REFERENCES carrier(carrier_id)
);
""")
    print('### Конец задания 1.d ###\n')
    print('### Задание 1.e ###')
    print("""
--> SELECT c.carrier_name, COUNT(dzc.delivery_zone_id) AS zone_count
-->     FROM carrier c
-->     JOIN delivery_zone_carrier dzc ON c.carrier_id = dzc.carrier_id
-->     GROUP BY c.carrier_name
-->     ORDER BY zone_count DESC
-->     LIMIT 1
""")
    print('### Конец задания 1.e ###\n')
    url = 'https://api.data.gov.sg/v1/environment/air-temperature'
    print(f'По данному сервису "{url}" можно получить json следующего вида :')
    response = r.get(url)
    pprint(response.json())
    with open(f'temperature_at_{dt.datetime.now().strftime("%Y-%m-%d_%H:%M:%s")}.json', 'w') as f:
        json.dump(response.json(), f)
        print('### Задание 3 ###\n')
    print("""
--> 1.	Введение системы ответственных за документацию:
-->     •	Описание: Назначить ответственных за каждую ключевую часть документации. Эти ответственные лица будут следить за актуализацией информации и проверять изменения, вносимые другими сотрудниками.
-->     •	Реализация: Создать список всех разделов документации и назначить за каждый раздел ответственного. Ввести регулярные проверки и отчеты о состоянии документации.
--> 2.	Создание системы регулярных обзоров и обновлений:
-->     •	Описание: Внедрить регулярные обзоры и обновления документации, чтобы она всегда оставалась актуальной.
-->     •	Реализация: Установить график ежемесячных или ежеквартальных обзоров документации. Назначить команды или отдельных сотрудников для проверки и обновления информации. Ввести систему уведомлений для ответственных лиц о необходимости проверки документации.
--> 3.	Обучение и мотивация сотрудников:
-->     •	Описание: Организовать обучение для сотрудников по ведению и актуализации документации, а также внедрить систему поощрений за качественное выполнение этих задач.
-->     •	Реализация: Проводить регулярные тренинги и семинары по лучшим практикам ведения документации. Внедрить мотивационную систему (например, бонусы или признание на уровне компании) для тех, кто активно участвует в поддержании актуальности базы знаний.       
""")
    print('### Конец задания 3 ###\n')

if __name__ == '__main__':
    main()
    print(help(main))